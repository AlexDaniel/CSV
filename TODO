• PASS more tests

• Buf vs Str - binary data (+ tests)

  Current thought: remove the meaning of "binary" as currently is
  implemented, as everything is valid Str already.

  Add binary support by allowing *real* binary (images, raw data)
  by adding a Buf entry in CSV::Field and use that instead of the
  current Str $.text by using CATCH blocks.

  When fetching the field, check if Buf is set and return that (if
  possible)

• csv () function

• Fragments

  Lazyness++

  col=2,5-8,20-*  => (1,4..7,19..Inf)

  $ perl6 -e 'my@range=(1,4..7,19..Inf);my@c=(^10)[@range];@c.perl.say'
  Array.new(1, 4, 5, 6, 7)

• Hooks

• Documentation

• Speed

  Once Regexes are "fast" again, and $!eol can be embedded in $chx,
  re-enable the ~~ $eol again. For now disable the use of Regex in
  eol attribute.

   new (eol => Str,                     # supported
   new (eol => "\n",                    # supported
   new (eol => "\r\n",                  # supported
   new (eol => rx{ \s* \r?\n },         # future

• Decide if types should be dealt with beyond current overloading

  See use of hashes (_hr)

• bind_columns and hashes

  If returning hashes, consider if returning Str:Str kv pairs is
  the way to go instead of Str:CSV::Field. If so, then column types
  might be useful again.
